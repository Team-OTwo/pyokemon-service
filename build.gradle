plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id("com.diffplug.spotless") version "6.25.0"
}


allprojects {
    group = 'com.pyokemon'
    version = '0.0.1-SNAPSHOT'
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    spotless {
        java {
            eclipse().configFile("${rootProject.projectDir}/eclipse-java-google-style.xml")
            importOrder 'java', 'jakarta', 'javax', 'org', 'com', ''
        }
    }

    test {
        useJUnitPlatform()
    }
    
    build.dependsOn spotlessApply
}

// CI 환경인지 확인
def isCiEnvironment = System.getenv('CI') != null || System.getenv('GITHUB_ACTIONS') != null

// Task to install git hooks - 환경에 따라 다르게 구현
if (isCiEnvironment) {
    // CI 환경에서는 빈 태스크만 생성
    task installGitHooks {
        doFirst {
            println "CI 환경에서는 Git hooks 설치를 건너뜁니다."
        }
    }
} else {
    // 로컬 환경에서는 실제 hook 설치
    task installGitHooks(type: Copy) {
        from file("${rootProject.projectDir}/githook/pre-commit")
        into file("${rootProject.projectDir}/.git/hooks")
        
        // 파일 모드 설정을 제거하고 doLast에서 쉘 명령으로 권한 설정
        doLast {
            def hookFile = new File("${rootProject.projectDir}/.git/hooks/pre-commit")
            if (hookFile.exists()) {
                exec {
                    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                        commandLine 'cmd', '/c', "attrib +x ${hookFile.absolutePath}"
                    } else {
                        commandLine 'chmod', '+x', hookFile.absolutePath
                    }
                }
                println "Git hook 권한 설정 완료: ${hookFile.absolutePath}"
            }
        }
    }
}

// Root project build also depends on spotlessApply and installGitHooks
build.dependsOn spotlessApply
build.dependsOn installGitHooks